/* Plugin generated by AMXX-Studio */

/*							*/
/*		Static Addons #1.6 presents by <CsxTeams>	*/
/*							*/
/*	
	Static Addons, AMX Mod X Plugin
	Copyright (C) 2014  <CsxTeams>
	
	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.
	
	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.
	
	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <http://www.gnu.org/licenses/>.
	
	Current version: # 1.1
	--------------------------------------------------------------
	Changelog for Plugin Csxbans changes/fixes by ReVKa...
	--------------------------------------------------------------						
	v1.0 alpha ///
	-- First
	v1.1
	-Added a 2 Ban menu
	-Added a cvars
	-Added Block Change Name [DJ_West]
	-Added native set_user_frozen
*/


#include <amxmodx>
#include <amxmisc>
#include <ColorChat>

#define PLUGIN "Static Addons"
#define VERSION "1.1"
#define AUTHOR "ReVKa"


new const MenuVersion[] = "# 1.4"
new MenuPosFxBanMenu
new MenuPlayersFxBanMenu[32]

#define KeysFxBanMenu (1<<0)|(1<<1)|(1<<2)|(1<<3)|(1<<4)|(1<<5)|(1<<6)|(1<<7)|(1<<8)|(1<<9)
#define MAX_PLAYERS 32
#define ADMIN_LEVEL ADMIN_BAN
#define MAX_SAY 8

new Say_word[MAX_SAY][] =
{
"0","1","2","3","4","5","6","7"
}
new BanTimes[7][] =
{
"РЎРІРѕС‘ Р’СЂРµРјСЏ", "10", "30", "60", "140", "300", "1440"
}
new BanReason[7][] =
{
"РЎРІРѕСЏ РџСЂРёС‡РёРЅР°", "Р§РёС‚РµСЂ", "РќРµР°РґРµРєРІР°С‚", "РљРµРјРїРµСЂРёС‚", "Р‘РµР· РџСЂРёС‡РёРЅС‹", "РћСЃРєРѕСЂР±Р»РµРЅРёРµ", "РќР°СЂСѓС€РµРЅРёРµ РџСЂР°РІРёР»"
}

new g_SayText
new Cvar_Name_Punish,Cvar_Name_Punish_time,Cvar_Name_on,Cvar_Name_warn,Cvar_BanMenu_Type,Cvar_BanMenu_Punish;

new g_Warn[33]

new reasons[33][64]
new banduration[33][12]
new banlenght[33][12]

new Player_Ban[33];
new banReason[33];
new time_ban[33];
new time_bans[33][12];

#define MAX_BANLIMITS	30
new g_maxban_times[MAX_BANLIMITS];
new g_maxban_flags[MAX_BANLIMITS];

new g_total_maxban_times;

public plugin_init() {
	
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	Cvar_Name_Punish = register_cvar("amx_static_namepunish", "1")
	Cvar_Name_Punish_time = register_cvar("amx_static_name_time", "60")
	Cvar_Name_on = register_cvar("amx_static_name_on", "0")
	Cvar_Name_warn = register_cvar("amx_static_name_warn", "3")
	Cvar_BanMenu_Type = register_cvar("amx_static_banmenu_type", "1")
	Cvar_BanMenu_Punish = register_cvar("amx_static_banmenu_punish", "3")
	
	register_concmd("amx_banmenu",		 "ShowFxBanMenu",	 ADMIN_BAN, 	"- displays ban menu")
	register_concmd("sc_banmenu",		 "ShowFxBanMenu",	ADMIN_BAN, 	"- displays ban menu")
	
	register_srvcmd("stc_addbanlimit", 	 "CmdAddBanLimit", 	-1, 		"<flag> <time in minutes>");
	
	register_clcmd("FXBans_SetProperty", "SetPropertyReason");
	register_clcmd("FXBans_SetPropertyTime", "SetPropertyTime");
	
	register_clcmd("CSXBans_SetProperty", "SetPropertyReasons");
	register_clcmd("CSXBans_SetPropertyTime", "SetPropertyTimes");
	
	g_SayText = get_user_msgid("SayText")
	register_message(g_SayText, "Block_NameChange")
	
	register_menucmd(register_menuid("FxBanMenu"), KeysFxBanMenu, "PressedFxBanMenu")
	// Add your code here...
	
	new configsDir[64]
	get_configsdir(configsDir, 63)
	
	server_cmd("exec %s/StaticAddons.cfg", configsDir)
}
public client_connect(id)
{
	g_Warn[id] = 0;
}
public CmdAddBanLimit()
{
	if( read_argc() != 3 )
	{
		log_amx("stc_addbanlimit was used with incorrect parameters!");
		log_amx("Usage: stc_addbanlimit <flags> <time in minutes>");
		return PLUGIN_HANDLED;
	}
	
	static arg[16];
	
	read_argv(1, arg, sizeof(arg) - 1);
	new flags = read_flags(arg);
	
	read_argv(2, arg, sizeof(arg) - 1);
	new minutes = str_to_num(arg);
	
	if( g_total_maxban_times >= MAX_BANLIMITS )
	{
		static notified;
		if( !notified )
		{
			log_amx("The stc_addbanlimit has reached its maximum!");
			notified = 1;
		}
		return PLUGIN_HANDLED;
	}
	
	g_maxban_flags[g_total_maxban_times] = flags;
	g_maxban_times[g_total_maxban_times] = minutes;
	
	
	g_total_maxban_times++;
	
	return PLUGIN_HANDLED;
}

public Block_NameChange(msgid, msgdest, msgent)
{
	new s_MessageType[32]
	get_msg_arg_string(2, s_MessageType, charsmax(s_MessageType))
	
	if (equal(s_MessageType, "#Cstrike_Name_Change") && get_pcvar_num(Cvar_Name_on))
	{
		client_print(msgent, print_console, "Sorry, change name not allowed!")
		g_Warn[msgent]++;
		
		if(g_Warn[msgent] > get_pcvar_num(Cvar_Name_warn))
		{
			switch(get_pcvar_num(Cvar_Name_Punish))
			{
				case 0 : return PLUGIN_HANDLED
				case 1:  server_cmd("kick #%d ^"Cannot Change Name^"", get_user_userid(msgent))
				case 2:  server_cmd("amx_ban %d #%d ^"Cannot Change Name^"",get_pcvar_num(Cvar_Name_Punish_time), get_user_userid(msgent))
				case 3:  server_cmd("amx_ban #%d %d ^"Cannot Change Name^"", get_user_userid(msgent), get_pcvar_num(Cvar_Name_Punish_time))
				case 4:  server_cmd("amx_staticban %d #%d ^"Cannot Change Name^"",get_pcvar_num(Cvar_Name_Punish_time), get_user_userid(msgent))
				case 5:  server_cmd("amx_superban #%d %d ^"Cannot Change Name^"", get_user_userid(msgent), get_pcvar_num(Cvar_Name_Punish_time))
			}
		}
		server_cmd("kick #%d ^"Cannot Change Name^"", get_user_userid(msgent))
		
		return PLUGIN_HANDLED
	}
	
	return PLUGIN_CONTINUE
}

public client_infochanged(id)
{
	if (is_user_connected(id) && get_pcvar_num(Cvar_Name_on))
	{
		new s_NewName[32], s_OldName[32]
		
		get_user_info(id, "name", s_NewName, charsmax(s_NewName))
		get_user_name(id, s_OldName, charsmax(s_OldName))
		
		if (!equali(s_OldName, s_NewName))
			set_user_info(id, "name", s_OldName)
	}
}


public ShowFxBanMenu(id, level, cid)
{
	if(!cmd_access(id, level, cid, 1))
	{
		return PLUGIN_HANDLED
	}
	
	switch(get_pcvar_num(Cvar_BanMenu_Type))
	{
			case 1:cmdsBanMenu(id)
			case 2:ShowMenuFxBanMenu(id, MenuPosFxBanMenu = 0)
	}
	
	return PLUGIN_HANDLED
}

public ShowMenuFxBanMenu(id, position) {
	// Menu stuff //
	if (position < 0) { return 0; }
	
	new i, k
	new MenuBody[812]
	new CurrentKey = 0
	new Start = position * 5
	new Num
	new UserName[32]
	get_players(MenuPlayersFxBanMenu, Num)
	if (Start >= Num) { Start = position = MenuPosFxBanMenu = 0; }
	new Len = format(MenuBody, 811, "\rР‘Р°РЅ РњРµРЅСЋ \w- \d%s\y\R%d/%d^n\w^n",MenuVersion, position+1, (Num / 5 + ((Num % 5) ? 1 : 0 )) )
	new End = Start + 5
	new Keys = (1<<9)
	if (End > Num) { End = Num; }
	
	for(i=Start;i<End;i++) {
		k = MenuPlayersFxBanMenu[i]
		get_user_name(k, UserName, 31)
		Keys |= (1<<CurrentKey++)
		if(get_user_flags(k) & ADMIN_LEVEL)
		Len += format(MenuBody[Len], (811-Len), "\r%i. \d%s\r**\w^n", CurrentKey, UserName)
		else
		Len += format(MenuBody[Len], (811-Len), "\r%i. \w%s^n", CurrentKey, UserName)
	}
	Len += format(MenuBody[Len], (811-Len), !reasons[id][0] ? "^n\r7. \wРџСЂРёС‡РёРЅР° Р‘Р°РЅР°: \d<РќРµ СѓРєР°Р·Р°РЅР°>^n" : "^n\r7. \wРџСЂРёС‡РёРЅР° Р‘Р°РЅР°: '\r%s\w'^n",!reasons[id][0] ? "" : reasons[id])
	Keys |= (1<<6)
	Len += format(MenuBody[Len], (811-Len), !banduration[id][0] ? "\r8. \wР’СЂРµРјСЏ Р‘Р°РЅР°: \d<РќРµ СѓРєР°Р·Р°РЅРѕ>^n" : "\r8. \wР’СЂРµРјСЏ Р‘Р°РЅР°: \y%s^n",!banduration[id][0] ? "" : banlenght[id])
	Keys |= (1<<7)
	
	if (End != Num) {
		format(MenuBody[Len], (511-Len), "^n\r9. \wР’РїРµСЂРµРґ^n%s", position ? "\r0. \wРќР°Р·Р°Рґ" : "\r0. \wР’С‹С…РѕРґ")
		Keys |= (1<<8)
	}
	else {
		format(MenuBody[Len], (511-Len), "^n%s", position ? "\r0. \wРќР°Р·Р°Рґ" : "\r0. \wР’С‹С…РѕРґ")
	}
	
	show_menu(id, Keys, MenuBody, -1, "FxBanMenu")
	return 0
}

public PressedFxBanMenu(id, key) {
	switch (key) {
		case 8: ShowMenuFxBanMenu(id, ++MenuPosFxBanMenu) // More Option
		case 9: ShowMenuFxBanMenu(id, --MenuPosFxBanMenu) // Back Option
		case 7:
		{
			client_cmd(id, "messagemode FXBans_SetPropertyTime");
			ColorChat(id,RED,"^1[^4РњРµРЅСЋ Р‘Р°РЅР°^1] Р’РІРµРґРёС‚Рµ ^3Р’СЂРµРјСЏ Р±Р°РЅР°^1 РІ РјРёРЅСѓС‚Р°С…, 0 - РЅР°РІСЃРµРіРґР°")
		}
		case 6:
		{
			client_cmd(id, "messagemode FXBans_SetProperty");
			ColorChat(id,RED,"^1[^4РњРµРЅСЋ Р‘Р°РЅР°^1] Р’РІРµРґРёС‚Рµ ^3РџСЂРёС‡РёРЅСѓ Р‘Р°РЅР°^1 РЅР° СЂСѓСЃСЃРєРѕРј СЏР·С‹РєРµ")
		}
		default: {
			if(!reasons[id][0])
			{
				ColorChat(id,RED,"^1[^4StaticBan^1] ^3РќРµР»СЊР·СЏ Р±Р°РЅРёС‚СЊ Р±РµР· РїСЂРёС‡РёРЅС‹!^1")
				return PLUGIN_HANDLED
			}
			// Get User ID and Username
			new PlayerID = MenuPlayersFxBanMenu[MenuPosFxBanMenu * 5 + key]
			// Do actions here
			if(get_user_flags(PlayerID) & ADMIN_LEVEL)
			return PLUGIN_HANDLED
			
			switch(get_pcvar_num(Cvar_BanMenu_Punish))
			{
				case 0 : return PLUGIN_HANDLED
				case 1:  client_cmd(id,"amx_ban %d #%d ^"%s^"",str_to_num(banduration[id]), get_user_userid(PlayerID), reasons[id])
				case 2:  client_cmd(id,"amx_ban #%d %d ^"%s^"", get_user_userid(PlayerID), str_to_num(banduration[id]), reasons[id])
				case 3:  client_cmd(id,"amx_staticban %d #%d ^"%s^"",str_to_num(banduration[id]), get_user_userid(PlayerID), reasons[id])
				case 4:  client_cmd(id,"amx_superban #%d %d ^"%s^"", get_user_userid(PlayerID), str_to_num(banduration[id]), reasons[id])
			}
		}
	}
	return PLUGIN_HANDLED
}
public SetPropertyTime(id)
{
	static arg[5];
	read_argv(1, arg, charsmax(arg));
	
	if ( !strlen(arg) )
	{
		client_print(id,print_chat, "[РњРµРЅСЋ Р‘Р°РЅР°] You can't set a property blank! Please type a new value.");
		client_cmd(id, "messagemode FXBans_SetPropertyTime");
		return PLUGIN_HANDLED;
	}
	else if ( !IsStrFloat(arg) )
	{
		client_print(id,print_chat, "[РњРµРЅСЋ Р‘Р°РЅР°] You can't use letters in a property! Please type a new value.");
		client_cmd(id, "messagemode FXBans_SetPropertyTime");
		return PLUGIN_HANDLED;
	}
	new length = str_to_num(arg);
	new maxlength = GetMaxBanTime(id);
	
	if( maxlength && (!length || length > maxlength) )
	{
		client_print(id,print_chat, "[РњРµРЅСЋ Р‘Р°РЅР°] The property has to be between^3 1^1 and^4 %s^1!",maxlength);
		client_cmd(id, "messagemode FXBans_SetPropertyTime");
		return PLUGIN_HANDLED;
	}
	
	static bantime[64]
	GetBanTime(length,bantime,63)
	copy(banlenght[id],charsmax(bantime),bantime)
	copy(banduration[id],charsmax(arg),arg)
	
	ShowMenuFxBanMenu(id, MenuPosFxBanMenu = 0)
	
	
	
	return PLUGIN_HANDLED;
}

GetMaxBanTime(client)
{
	if( !g_total_maxban_times ) return 0;
	
	new flags = get_user_flags(client);
	
	for( new i = 0; i < g_total_maxban_times; i++ )
	{
		#if !defined MAX_BANLIMITS
		if( flags & ArrayGetCell(g_maxban_flags, i) )
		{
			return ArrayGetCell(g_maxban_times, i);
		}
		#else
		if( flags & g_maxban_flags[i] )
		{
			return g_maxban_times[i];
		}
		#endif
	}
	
	return 0;
}
public SetPropertyReason(id)
{
	static arg[36];
	read_argv(1, arg, charsmax(arg));
	
	if ( !strlen(arg) )
	{
		client_print(id,print_chat, "[РњРµРЅСЋ Р‘Р°РЅР°] You can't set a property blank! Please type a new value.");
		client_cmd(id, "messagemode FXBans_SetPropertyReason");
		return PLUGIN_HANDLED;
	}
	while (replace(arg, charsmax( arg ), "q", "Р№")) {}
	while (replace(arg, charsmax( arg ), "w", "С†")) {}
    	while (replace(arg, charsmax( arg ), "e", "Сѓ")) {}
    	while (replace(arg, charsmax( arg ), "r", "Рє")) {}
    	while (replace(arg, charsmax( arg ), "t", "Рµ")) {}
    	while (replace(arg, charsmax( arg ), "y", "РЅ")) {}
    	while (replace(arg, charsmax( arg ), "u", "Рі")) {}
   	while (replace(arg, charsmax( arg ), "i", "С€")) {}
   	while (replace(arg, charsmax( arg ), "o", "С‰")) {}
    	while (replace(arg, charsmax( arg ), "p", "Р·")) {}
    	while (replace(arg, charsmax( arg ), "[", "С…")) {}
    	while (replace(arg, charsmax( arg ), "]", "СЉ")) {}
    	while (replace(arg, charsmax( arg ), "a", "С„")) {}
	while (replace(arg, charsmax( arg ), "s", "С‹")) {}
    	while (replace(arg, charsmax( arg ), "d", "РІ")) {}
    	while (replace(arg, charsmax( arg ), "f", "Р°")) {}
    	while (replace(arg, charsmax( arg ), "g", "Рї")) {}
    	while (replace(arg, charsmax( arg ), "h", "СЂ")) {}
    	while (replace(arg, charsmax( arg ), "j", "Рѕ")) {}
    	while (replace(arg, charsmax( arg ), "k", "Р»")) {}
    	while (replace(arg, charsmax( arg ), "l", "Рґ")) {}
    	while (replace(arg, charsmax( arg ), ";", "Р¶")) {}
    	while (replace(arg, charsmax( arg ), "'", "СЌ")) {}
   	while (replace(arg, charsmax( arg ), "z", "СЏ")) {}
   	while (replace(arg, charsmax( arg ), "x", "С‡")) {}
   	while (replace(arg, charsmax( arg ), "c", "СЃ")) {}
    	while (replace(arg, charsmax( arg ), "v", "Рј")) {}
    	while (replace(arg, charsmax( arg ), "b", "Рё")) {}
    	while (replace(arg, charsmax( arg ), "n", "С‚")) {}
    	while (replace(arg, charsmax( arg ), "m", "СЊ")) {}
    	while (replace(arg, charsmax( arg ), ",", "Р±")) {}
    	while (replace(arg, charsmax( arg ), ".", "СЋ")) {}
    	while (replace(arg, charsmax( arg ), "Q", "Р™")) {}
    	while (replace(arg, charsmax( arg ), "W", "Р¦")) {}
   	while (replace(arg, charsmax( arg ), "E", "РЈ")) {}
    	while (replace(arg, charsmax( arg ), "R", "Рљ")) {}
    	while (replace(arg, charsmax( arg ), "T", "Р•")) {}
    	while (replace(arg, charsmax( arg ), "Y", "Рќ")) {}
    	while (replace(arg, charsmax( arg ), "U", "Р“")) {}
    	while (replace(arg, charsmax( arg ), "I", "РЁ")) {}
    	while (replace(arg, charsmax( arg ), "O", "Р©")) {}
    	while (replace(arg, charsmax( arg ), "P", "Р—")) {}
    	while (replace(arg, charsmax( arg ), "{", "РҐ")) {}
    	while (replace(arg, charsmax( arg ), "}", "РЄ")) {}
    	while (replace(arg, charsmax( arg ), "A", "Р¤")) {}
    	while (replace(arg, charsmax( arg ), "S", "Р«")) {}
    	while (replace(arg, charsmax( arg ), "D", "Р’")) {}
    	while (replace(arg, charsmax( arg ), "F", "Рђ")) {}
    	while (replace(arg, charsmax( arg ), "G", "Рџ")) {}
  	while (replace(arg, charsmax( arg ), "H", "Р ")) {}	    	
	while (replace(arg, charsmax( arg ), "J", "Рћ")) {}	    	
	while (replace(arg, charsmax( arg ), "K", "Р›")) {}
    	while (replace(arg, charsmax( arg ), "L", "Р”")) {}
	while (replace(arg, charsmax( arg ), ":", "Р–")) {}
	while (replace(arg, charsmax( arg ), "Z", "РЇ")) {}
	while (replace(arg, charsmax( arg ), "X", "Р§")) {}
	while (replace(arg, charsmax( arg ), "C", "РЎ")) {}
	while (replace(arg, charsmax( arg ), "V", "Рњ")) {}
	while (replace(arg, charsmax( arg ), "B", "Р")) {}
	while (replace(arg, charsmax( arg ), "N", "Рў")) {}
	while (replace(arg, charsmax( arg ), "M", "Р¬")) {}
	while (replace(arg, charsmax( arg ), "<", "Р‘")) {}
	while (replace(arg, charsmax( arg ), ">", "Р®")) {}
	copy(reasons[id],charsmax(arg),arg)
	
	ShowMenuFxBanMenu(id, MenuPosFxBanMenu = 0)
	
	return PLUGIN_HANDLED;
}

bool:IsStrFloat(string[])
{
	new len = strlen(string);
	for ( new i = 0; i < len; i++ )
	{
		switch ( string[i] )
		{
			case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.', '-', '*':continue;
			default:	return false;
		}
	}
	
	return true;
}
stock GetBanTime(const bantime, length[], len)
{
	new minutes = bantime;
	new hours = 0;
	new days = 0;
	
	while( minutes >= 60 )
	{
		minutes -= 60;
		hours++;
	}
	
	while( hours >= 24 )
	{
		hours -= 24;
		days++;
	}
	
	new bool:add_before;
	if( minutes )
	{
		formatex(length, len, "%i РјРёРЅСѓС‚(С‹)", minutes);
		
		add_before = true;
	}
	if( hours )
	{
		if( add_before )
		{
			format(length, len, "%i С‡Р°СЃ(Р°,РѕРІ), %s", hours, length);
		}
		else
		{
			formatex(length, len, "%i С‡Р°СЃ(Р°,РѕРІ)", hours);
			
			add_before = true;
		}
	}
	if( days )
	{
		if( add_before )
		{
			format(length, len, "%i РґРµРЅСЊ(СЏ,РµР№), %s", days, length);
		}
		else
		{
			formatex(length, len, "%i РґРµРЅСЊ(СЏ,РµР№)", days);
			
			add_before = true;
		}
	}
	if( !add_before )
	{
		// minutes, hours, and days = 0
		// assume permanent ban
		copy(length, len, "Р‘Р°РЅ РЅР°РІСЃРµРіРґР°");
	}
}
/////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

stock MenuSetProps(menu)
{
	new szText[128]
	formatex(szText, 127, "РќР°Р·Р°Рґ")
	menu_setprop(menu, MPROP_BACKNAME, szText)
	
	formatex(szText, 127, "Р’РїРµСЂРµРґ")
	menu_setprop(menu, MPROP_NEXTNAME, szText)
	
	formatex(szText, 127, "Р’С‹С…РѕРґ  ^n^n\yStaticAddons \d# \y%s", VERSION)
	menu_setprop(menu, MPROP_EXITNAME, szText)
	
	return 1
} 
public cmdsBanMenu(id)
{
	new title[512]; formatex(title, sizeof(title) - 1, "\rР‘Р°РЅ РњРµРЅСЋ \y[РРіСЂРѕРєРё]^n\dР§Р°СЃС‚СЊ \w1\d РёР· \w4")
	
	//Create the menu
	new p_Menu = menu_create(title, "menu_chooose_user")
	new s_Players[32], i_Num, i_Player
	new s_Name[32], s_Player[10]
	new szTemp[120];
	get_players(s_Players, i_Num)
	
	MenuSetProps(p_Menu)
	
	
	for (new i; i < i_Num; i++)
	{
		i_Player = s_Players[i]
		get_user_name(i_Player, s_Name, charsmax(s_Name))
		num_to_str(i_Player, s_Player, charsmax(s_Player))
		if (get_user_flags(i_Player) & ADMIN_LEVEL)	formatex ( szTemp, sizeof ( szTemp ) - 1, "\d%s\r**", s_Name);
		else	formatex ( szTemp, sizeof ( szTemp ) - 1, "\w%s", s_Name);
		menu_additem(p_Menu, szTemp, s_Player, 0)
	}
	
	menu_display(id, p_Menu, 0)
	return PLUGIN_HANDLED;
}
public menu_chooose_user(id, menu, item)
{
	if (item == MENU_EXIT)
	{
		menu_destroy(menu)
		return PLUGIN_HANDLED
	}
	
	new s_Data[12], s_Name[64], i_Access, i_Callback
	menu_item_getinfo(menu, item, i_Access, s_Data, charsmax(s_Data), s_Name, charsmax(s_Name), i_Callback)
	Player_Ban[id] = str_to_num(s_Data)
	//if(get_user_flags(Player_Ban[id] & ADMIN_LEVEL)) return PLUGIN_HANDLED
	MenuBanReason(id)
	
	menu_destroy(menu)
	return PLUGIN_HANDLED
}
public MenuBanReason(id)
{
	new title[512]; formatex(title, sizeof(title) - 1, "\rР‘Р°РЅ РњРµРЅСЋ\y[РџСЂРёС‡РёРЅР°]^n\dР§Р°СЃС‚СЊ \w2\d РёР· \w4")
	//Create the menu
	new p_Menu = menu_create(title, "Menu_BanReason")
	
	MenuSetProps(p_Menu)
	
	for (new i; i < 7; i++)
	{
		menu_additem(p_Menu, BanReason[i], Say_word[i+1], 0)
	}
	
	menu_display(id, p_Menu, 0)
}
public Menu_BanReason(id, menu, item)
{
	if (item == MENU_EXIT)
	{
		menu_destroy(menu)
		return PLUGIN_HANDLED;
	}
	new s_Data[6], s_Name[64], i_Access, i_Callback;
	menu_item_getinfo(menu, item, i_Access, s_Data, charsmax(s_Data), s_Name, charsmax(s_Name), i_Callback)
	banReason[id] = str_to_num(s_Data)
	if((str_to_num(s_Data)-1) != 0)
	{
		MenuBanTime(id)
	}
	else{
		client_cmd(id, "messagemode CSXBans_SetProperty");
		ColorChat(id,RED,"^1[^4РњРµРЅСЋ Р‘Р°РЅР°^1] Р’РІРµРґРёС‚Рµ ^3РџСЂРёС‡РёРЅСѓ Р‘Р°РЅР°^1 РЅР° СЂСѓСЃСЃРєРѕРј СЏР·С‹РєРµ")
	}
	menu_destroy(menu)
	return PLUGIN_HANDLED;
	
}
public MenuBanTime(id)
{
	new title[512]; formatex(title, sizeof(title) - 1, "\rР‘Р°РЅ РњРµРЅСЋ \y[Р’СЂРµРјСЏ]^n\dР§Р°СЃС‚СЊ \w3\d РёР· \w4")
	//Create the menu
	new p_Menu = menu_create(title, "Menu_BanTime")
	
	MenuSetProps(p_Menu)
	
	for (new i; i < 7; i++)
	{
		menu_additem(p_Menu, BanTimes[i], Say_word[i+1], 0)
	}
	
	menu_display(id, p_Menu, 0)
}
public Menu_BanTime(id, menu, item)
{
	if (item == MENU_EXIT)
	{
		menu_destroy(menu)
		return PLUGIN_HANDLED;
	}
	new s_Data[6], s_Name[64], i_Access, i_Callback;
	menu_item_getinfo(menu, item, i_Access, s_Data, charsmax(s_Data), s_Name, charsmax(s_Name), i_Callback)
	time_ban[id] = str_to_num(s_Data)
	if((str_to_num(s_Data)-1) != 0)
	{
		menu_bantype(id);
	}
	else{
		client_cmd(id, "messagemode CSXBans_SetPropertyTime");
		ColorChat(id,RED,"^1[^4РњРµРЅСЋ Р‘Р°РЅР°^1]Р’РІРµРґРёС‚Рµ ^3РџСЂРёС‡РёРЅСѓ Р‘Р°РЅР°^1 РЅР° СЂСѓСЃСЃРєРѕРј СЏР·С‹РєРµ")
	}
	
	menu_destroy(menu)
	return PLUGIN_HANDLED;
	
}
public menu_bantype(id)
{
	new name[32]
	new ip [32]
	new steam[32]
	
	get_user_name(Player_Ban[id],name,31)
	get_user_ip(Player_Ban[id],ip,31)
	get_user_authid(Player_Ban[id],steam,31)
	
	//new title[512]; formatex(title, sizeof(title) - 1, "\rР‘Р°РЅ РњРµРЅСЋ \y[РўРёРї Р‘Р°РЅР°]^n\dР§Р°СЃС‚СЊ \w4\d РёР· \w4^nР’С‹ С…РѕС‚РёС‚Рµ Р·Р°Р±Р°РЅРёС‚СЊ РёРіСЂРѕРєР° '\d%s\w'^n\d Р’СЂРµРјСЏ Р±Р°РЅР° \w[\y%\w] \dРџСЂРёС‡РёРЅР°\w [\y%s\w]",get_user_userid(Player_Ban[id]),(time_ban[id] - 1) != 0 ? BanTimes[time_ban[id]-1] : time_bans[id], (banReason[id] - 1) != 0 ? BanReason[banReason[id]-1] : reasons[id])
	new title[512]; formatex(title, sizeof(title) - 1, "\rР‘Р°РЅ РњРµРЅСЋ \y[РўРёРї Р‘Р°РЅР°]^n\dР§Р°СЃС‚СЊ \w4\d РёР· \w4^nР’С‹ С…РѕС‚РёС‚Рµ Р·Р°Р±Р°РЅРёС‚СЊ РёРіСЂРѕРєР° '\d%s\w'^n\w \yAuthid \w[\r%s\w] \yIp \w[\r%s\w]",name,steam,ip)
	//Create the menu
	new p_Menu = menu_create(title, "Menu_bantype")
	
	MenuSetProps(p_Menu)
	
	menu_additem(p_Menu,"Р—Р°Р±Р°РЅРёС‚СЊ РРіСЂРѕРєР°","1")
	menu_additem(p_Menu,"Р’С‹Р№С‚Рё СЃ РјРµРЅСЋ Р±Р°РЅР°","2")
	
	menu_display(id, p_Menu, 0)
}
public Menu_bantype(id, menu, item)
{
	if (item == MENU_EXIT)
	{
		menu_destroy(menu)
		return PLUGIN_HANDLED;
	}
	
	new s_Data[6], s_Name[64], i_Access, i_Callback;
	menu_item_getinfo(menu, item, i_Access, s_Data, charsmax(s_Data), s_Name, charsmax(s_Name), i_Callback)
	
	new PlayerID = Player_Ban[id]
	
	if(time_ban[id]-1 !=0)
	copy(banduration[id],63,BanTimes[time_ban[id]-1])
	else
	copy(banduration[id],63,time_bans[id])
	
	if((banReason[id] - 1) != 0)
	copy(reasons[id],63,BanReason[banReason[id]-1] )
	else
	copy(reasons[id],63,reasons[id])
	
	// Do actions here
	if(get_user_flags(PlayerID) & ADMIN_LEVEL)
	return PLUGIN_HANDLED
			
	switch(get_pcvar_num(Cvar_BanMenu_Punish))
	{
		case 0 : return PLUGIN_HANDLED
		case 1:  client_cmd(id,"amx_ban %d #%d ^"%s^"",str_to_num(banduration[id]), get_user_userid(PlayerID), reasons[id])
		case 2:  client_cmd(id,"amx_ban #%d %d ^"%s^"", get_user_userid(PlayerID), str_to_num(banduration[id]), reasons[id])
		case 3:  client_cmd(id,"amx_staticban %d #%d ^"%s^"",str_to_num(banduration[id]), get_user_userid(PlayerID), reasons[id])
		case 4:  client_cmd(id,"amx_superban #%d %d ^"%s^"", get_user_userid(PlayerID), str_to_num(banduration[id]), reasons[id])
	}
	
	return PLUGIN_HANDLED
}
public SetPropertyTimes(id)
{
	static arg[5];
	read_argv(1, arg, charsmax(arg));
	
	if ( !strlen(arg) )
	{
		client_print(id,print_chat, "[РњРµРЅСЋ Р‘Р°РЅР°] You can't set a property blank! Please type a new value.");
		client_cmd(id, "messagemode CSXBans_SetPropertyTime");
		return PLUGIN_HANDLED;
	}
	else if ( !IsStrFloat(arg) )
	{
		client_print(id,print_chat, "[РњРµРЅСЋ Р‘Р°РЅР°] You can't use letters in a property! Please type a new value.");
		client_cmd(id, "messagemode CSXBans_SetPropertyTime");
		return PLUGIN_HANDLED;
	}
	new check = str_to_num(arg);
	if(check < 0 || check > 10801)
	{
		client_print(id,print_chat, "[РњРµРЅСЋ Р‘Р°РЅР°] The property has to be between^3 0^1 and^4 3600^1!");
		client_cmd(id, "messagemode CSXBans_SetPropertyTime");
		return PLUGIN_HANDLED;
	}
	
	//time_ban[id]= str_to_num(arg)
	copy(time_bans[id],charsmax(arg),arg)
	
	menu_bantype(id);
	return PLUGIN_HANDLED;
}
public SetPropertyReasons(id)
{
	static arg[64];
	read_argv(1, arg, charsmax(arg));
	
	if ( !strlen(arg) )
	{
		client_print(id,print_chat, "[РњРµРЅСЋ Р‘Р°РЅР°] You can't set a property blank! Please type a new value.");
		client_cmd(id, "messagemode CSXBans_SetProperty");
		return PLUGIN_HANDLED;
	}
	while (replace(arg, charsmax( arg ), "q", "Р№")) {}
	while (replace(arg, charsmax( arg ), "w", "С†")) {}
    	while (replace(arg, charsmax( arg ), "e", "Сѓ")) {}
    	while (replace(arg, charsmax( arg ), "r", "Рє")) {}
    	while (replace(arg, charsmax( arg ), "t", "Рµ")) {}
    	while (replace(arg, charsmax( arg ), "y", "РЅ")) {}
    	while (replace(arg, charsmax( arg ), "u", "Рі")) {}
   	while (replace(arg, charsmax( arg ), "i", "С€")) {}
   	while (replace(arg, charsmax( arg ), "o", "С‰")) {}
    	while (replace(arg, charsmax( arg ), "p", "Р·")) {}
    	while (replace(arg, charsmax( arg ), "[", "С…")) {}
    	while (replace(arg, charsmax( arg ), "]", "СЉ")) {}
    	while (replace(arg, charsmax( arg ), "a", "С„")) {}
	while (replace(arg, charsmax( arg ), "s", "С‹")) {}
    	while (replace(arg, charsmax( arg ), "d", "РІ")) {}
    	while (replace(arg, charsmax( arg ), "f", "Р°")) {}
    	while (replace(arg, charsmax( arg ), "g", "Рї")) {}
    	while (replace(arg, charsmax( arg ), "h", "СЂ")) {}
    	while (replace(arg, charsmax( arg ), "j", "Рѕ")) {}
    	while (replace(arg, charsmax( arg ), "k", "Р»")) {}
    	while (replace(arg, charsmax( arg ), "l", "Рґ")) {}
    	while (replace(arg, charsmax( arg ), ";", "Р¶")) {}
    	while (replace(arg, charsmax( arg ), "'", "СЌ")) {}
   	while (replace(arg, charsmax( arg ), "z", "СЏ")) {}
   	while (replace(arg, charsmax( arg ), "x", "С‡")) {}
   	while (replace(arg, charsmax( arg ), "c", "СЃ")) {}
    	while (replace(arg, charsmax( arg ), "v", "Рј")) {}
    	while (replace(arg, charsmax( arg ), "b", "Рё")) {}
    	while (replace(arg, charsmax( arg ), "n", "С‚")) {}
    	while (replace(arg, charsmax( arg ), "m", "СЊ")) {}
    	while (replace(arg, charsmax( arg ), ",", "Р±")) {}
    	while (replace(arg, charsmax( arg ), ".", "СЋ")) {}
    	while (replace(arg, charsmax( arg ), "Q", "Р™")) {}
    	while (replace(arg, charsmax( arg ), "W", "Р¦")) {}
   	while (replace(arg, charsmax( arg ), "E", "РЈ")) {}
    	while (replace(arg, charsmax( arg ), "R", "Рљ")) {}
    	while (replace(arg, charsmax( arg ), "T", "Р•")) {}
    	while (replace(arg, charsmax( arg ), "Y", "Рќ")) {}
    	while (replace(arg, charsmax( arg ), "U", "Р“")) {}
    	while (replace(arg, charsmax( arg ), "I", "РЁ")) {}
    	while (replace(arg, charsmax( arg ), "O", "Р©")) {}
    	while (replace(arg, charsmax( arg ), "P", "Р—")) {}
    	while (replace(arg, charsmax( arg ), "{", "РҐ")) {}
    	while (replace(arg, charsmax( arg ), "}", "РЄ")) {}
    	while (replace(arg, charsmax( arg ), "A", "Р¤")) {}
    	while (replace(arg, charsmax( arg ), "S", "Р«")) {}
    	while (replace(arg, charsmax( arg ), "D", "Р’")) {}
    	while (replace(arg, charsmax( arg ), "F", "Рђ")) {}
    	while (replace(arg, charsmax( arg ), "G", "Рџ")) {}
  	while (replace(arg, charsmax( arg ), "H", "Р ")) {}	    	
	while (replace(arg, charsmax( arg ), "J", "Рћ")) {}	    	
	while (replace(arg, charsmax( arg ), "K", "Р›")) {}
    	while (replace(arg, charsmax( arg ), "L", "Р”")) {}
	while (replace(arg, charsmax( arg ), ":", "Р–")) {}
	while (replace(arg, charsmax( arg ), "Z", "РЇ")) {}
	while (replace(arg, charsmax( arg ), "X", "Р§")) {}
	while (replace(arg, charsmax( arg ), "C", "РЎ")) {}
	while (replace(arg, charsmax( arg ), "V", "Рњ")) {}
	while (replace(arg, charsmax( arg ), "B", "Р")) {}
	while (replace(arg, charsmax( arg ), "N", "Рў")) {}
	while (replace(arg, charsmax( arg ), "M", "Р¬")) {}
	while (replace(arg, charsmax( arg ), "<", "Р‘")) {}
	while (replace(arg, charsmax( arg ), ">", "Р®")) {}
	
	copy(reasons[id],charsmax(arg),arg)
	
	MenuBanTime(id)
	return PLUGIN_HANDLED;
	
}
